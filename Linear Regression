{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:44.499653Z",
     "iopub.status.busy": "2025-08-11T13:32:44.499292Z",
     "iopub.status.idle": "2025-08-11T13:32:46.255214Z",
     "shell.execute_reply": "2025-08-11T13:32:46.253948Z",
     "shell.execute_reply.started": "2025-08-11T13:32:44.499588Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:46.258459Z",
     "iopub.status.busy": "2025-08-11T13:32:46.258119Z",
     "iopub.status.idle": "2025-08-11T13:32:46.280119Z",
     "shell.execute_reply": "2025-08-11T13:32:46.278638Z",
     "shell.execute_reply.started": "2025-08-11T13:32:46.258407Z"
    }
   },
   "outputs": [],
   "source": [
    "# read the dataset using pandas\n",
    "data = pd.read_csv('/kaggle/input/salary-data-simple-linear-regression/Salary_Data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:46.284602Z",
     "iopub.status.busy": "2025-08-11T13:32:46.284093Z",
     "iopub.status.idle": "2025-08-11T13:32:46.314091Z",
     "shell.execute_reply": "2025-08-11T13:32:46.312622Z",
     "shell.execute_reply.started": "2025-08-11T13:32:46.284518Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.1</td>\n",
       "      <td>39343.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.3</td>\n",
       "      <td>46205.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.5</td>\n",
       "      <td>37731.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>43525.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.2</td>\n",
       "      <td>39891.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YearsExperience   Salary\n",
       "0              1.1  39343.0\n",
       "1              1.3  46205.0\n",
       "2              1.5  37731.0\n",
       "3              2.0  43525.0\n",
       "4              2.2  39891.0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This displays the top 5 rows of the data\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:46.316343Z",
     "iopub.status.busy": "2025-08-11T13:32:46.316042Z",
     "iopub.status.idle": "2025-08-11T13:32:46.328272Z",
     "shell.execute_reply": "2025-08-11T13:32:46.326808Z",
     "shell.execute_reply.started": "2025-08-11T13:32:46.316294Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 30 entries, 0 to 29\n",
      "Data columns (total 2 columns):\n",
      "YearsExperience    30 non-null float64\n",
      "Salary             30 non-null float64\n",
      "dtypes: float64(2)\n",
      "memory usage: 608.0 bytes\n"
     ]
    }
   ],
   "source": [
    "# Provides some information regarding the columns in the data\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:46.330510Z",
     "iopub.status.busy": "2025-08-11T13:32:46.330152Z",
     "iopub.status.idle": "2025-08-11T13:32:46.771056Z",
     "shell.execute_reply": "2025-08-11T13:32:46.768786Z",
     "shell.execute_reply.started": "2025-08-11T13:32:46.330449Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 864x432 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# These Plots help to explain the values and how they are scattered\n",
    "\n",
    "plt.figure(figsize=(12,6))\n",
    "sns.pairplot(data,x_vars=['YearsExperience'],y_vars=['Salary'],height=7,kind='scatter')\n",
    "plt.xlabel('Years')\n",
    "plt.ylabel('Salary')\n",
    "plt.title('Salary Prediction')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:46.774153Z",
     "iopub.status.busy": "2025-08-11T13:32:46.773666Z",
     "iopub.status.idle": "2025-08-11T13:32:46.781247Z",
     "shell.execute_reply": "2025-08-11T13:32:46.780143Z",
     "shell.execute_reply.started": "2025-08-11T13:32:46.774080Z"
    }
   },
   "outputs": [],
   "source": [
    "X = data['YearsExperience']\n",
    "y = data['Salary']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:46.783467Z",
     "iopub.status.busy": "2025-08-11T13:32:46.783011Z",
     "iopub.status.idle": "2025-08-11T13:32:46.909182Z",
     "shell.execute_reply": "2025-08-11T13:32:46.907967Z",
     "shell.execute_reply.started": "2025-08-11T13:32:46.783391Z"
    }
   },
   "outputs": [],
   "source": [
    "# Import Segregating data from scikit learn\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:46.911090Z",
     "iopub.status.busy": "2025-08-11T13:32:46.910786Z",
     "iopub.status.idle": "2025-08-11T13:32:46.918463Z",
     "shell.execute_reply": "2025-08-11T13:32:46.916878Z",
     "shell.execute_reply.started": "2025-08-11T13:32:46.911033Z"
    }
   },
   "outputs": [],
   "source": [
    "# Split the data for train and test \n",
    "X_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.8,random_state=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:46.920325Z",
     "iopub.status.busy": "2025-08-11T13:32:46.920054Z",
     "iopub.status.idle": "2025-08-11T13:32:46.934065Z",
     "shell.execute_reply": "2025-08-11T13:32:46.932746Z",
     "shell.execute_reply.started": "2025-08-11T13:32:46.920280Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create new axis for x column\n",
    "X_train = X_train[:,np.newaxis]\n",
    "X_test = X_test[:,np.newaxis]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:46.935927Z",
     "iopub.status.busy": "2025-08-11T13:32:46.935615Z",
     "iopub.status.idle": "2025-08-11T13:32:47.033295Z",
     "shell.execute_reply": "2025-08-11T13:32:47.032294Z",
     "shell.execute_reply.started": "2025-08-11T13:32:46.935868Z"
    }
   },
   "outputs": [],
   "source": [
    "# Importing Linear Regression model from scikit learn\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:47.035620Z",
     "iopub.status.busy": "2025-08-11T13:32:47.035221Z",
     "iopub.status.idle": "2025-08-11T13:32:47.056946Z",
     "shell.execute_reply": "2025-08-11T13:32:47.055557Z",
     "shell.execute_reply.started": "2025-08-11T13:32:47.035556Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[9361.11639032]\n",
      "26819.06511870089\n"
     ]
    }
   ],
   "source": [
    "# Fitting the model\n",
    "lr = LinearRegression()\n",
    "lr.fit(X_train,y_train)\n",
    "print(lr.coef_)\n",
    "print(lr.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:47.059400Z",
     "iopub.status.busy": "2025-08-11T13:32:47.058979Z",
     "iopub.status.idle": "2025-08-11T13:32:47.070169Z",
     "shell.execute_reply": "2025-08-11T13:32:47.069016Z",
     "shell.execute_reply.started": "2025-08-11T13:32:47.059301Z"
    }
   },
   "outputs": [],
   "source": [
    "# Predicting the Salary for the Test values\n",
    "y_pred = lr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:47.072805Z",
     "iopub.status.busy": "2025-08-11T13:32:47.072333Z",
     "iopub.status.idle": "2025-08-11T13:32:47.363706Z",
     "shell.execute_reply": "2025-08-11T13:32:47.361745Z",
     "shell.execute_reply.started": "2025-08-11T13:32:47.072726Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the actual and predicted values\n",
    "\n",
    "c = [i for i in range (1,len(y_test)+1,1)]\n",
    "plt.plot(c,y_test,color='r',linestyle='-')\n",
    "plt.plot(c,y_pred,color='b',linestyle='-')\n",
    "plt.xlabel('Years_experience')\n",
    "plt.ylabel('Salary')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:47.366999Z",
     "iopub.status.busy": "2025-08-11T13:32:47.366337Z",
     "iopub.status.idle": "2025-08-11T13:32:47.374300Z",
     "shell.execute_reply": "2025-08-11T13:32:47.373047Z",
     "shell.execute_reply.started": "2025-08-11T13:32:47.366848Z"
    }
   },
   "outputs": [],
   "source": [
    "# Importing metrics for the evaluation of the model\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:47.376705Z",
     "iopub.status.busy": "2025-08-11T13:32:47.376222Z",
     "iopub.status.idle": "2025-08-11T13:32:47.389363Z",
     "shell.execute_reply": "2025-08-11T13:32:47.387763Z",
     "shell.execute_reply.started": "2025-08-11T13:32:47.376631Z"
    }
   },
   "outputs": [],
   "source": [
    "# calculate Mean square error\n",
    "mse = mean_squared_error(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T13:32:47.393503Z",
     "iopub.status.busy": "2025-08-11T13:32:47.392723Z",
     "iopub.status.idle": "2025-08-11T13:32:47.404817Z",
     "shell.execute_reply": "2025-08-11T13:32:47.402977Z",
     "shell.execute_reply.started": "2025-08-11T13:32:47.393392Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean squared error : 24477109.08965574\n"
     ]
    }
   ],
   "source": [
    "print('mean squared error :',mse)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 10624,
     "sourceId": 14867,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 29855,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
